name: Build Admin Back-Office UI

on:
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  TEMP_PATH: 'D:\deployment'
  DEPLOY_PATH: 'D:\StorjNetwork\storxweb'
  UI_PATH: 'satellite\admin\back-office\ui'

jobs:
  build-admin-ui:
    runs-on: [self-hosted, windows]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: satellite/admin/back-office/ui/package-lock.json
          
    - name: Install dependencies
      run: |
        Write-Host "Installing npm dependencies..."
        Set-Location $env:UI_PATH
        npm ci
        Write-Host "Dependencies installed successfully"
        
    - name: Build UI
      run: |
        $buildStart = Get-Date
        Write-Host "Building admin back-office UI..."
        
        Set-Location $env:UI_PATH
        npm run build
        
        $buildTime = (Get-Date) - $buildStart
        Write-Host "Build completed in $($buildTime.TotalSeconds) seconds"
        
        if (Test-Path "./build") {
          $buildSize = (Get-ChildItem "./build" -Recurse | Measure-Object -Property Length -Sum).Sum
          Write-Host "Build folder created successfully ($([math]::Round($buildSize/1MB, 2)) MB)"
        } else {
          Write-Error "Build failed - build folder not found"
          exit 1
        }
        
    - name: Move build to deployment folder
      run: |
        Write-Host "Moving build to deployment folder..."
        
        # Build folder is at satellite/admin/back-office/ui/build
        $sourcePath = Join-Path $env:UI_PATH "build"
        $destPath = Join-Path $env:TEMP_PATH "build"
        
        if (-not (Test-Path $sourcePath)) {
          Write-Error "Build folder not found at $sourcePath"
          exit 1
        }
        
        if (Test-Path $destPath) {
          Remove-Item $destPath -Recurse -Force -ErrorAction SilentlyContinue
        }
        
        Move-Item -Path $sourcePath -Destination $destPath -Force
        Write-Host "Build moved to deployment folder: $destPath"
        
    - name: Deploy to StorjNetwork
      run: |
        Write-Host "Deploying build to StorjNetwork..."
        
        $deploymentBuildPath = Join-Path $env:TEMP_PATH "build"
        $storjNetworkPath = $env:DEPLOY_PATH
        
        # Check if deployment build exists
        if (-not (Test-Path $deploymentBuildPath)) {
          Write-Error "Deployment build not found at $deploymentBuildPath"
          exit 1
        }
        
        # Check if StorjNetwork path exists and delete old build
        if (Test-Path $storjNetworkPath) {
          Write-Host "StorjNetwork path exists, deleting old build..."
          Remove-Item $storjNetworkPath -Recurse -Force -ErrorAction SilentlyContinue
          Write-Host "Old build deleted"
        } else {
          Write-Host "StorjNetwork path does not exist, creating directory..."
          $parentPath = Split-Path $storjNetworkPath -Parent
          if (-not (Test-Path $parentPath)) {
            New-Item -ItemType Directory -Path $parentPath -Force | Out-Null
          }
        }
        
        # Move build to StorjNetwork (automatically removes from deployment folder)
        Write-Host "Moving build to $storjNetworkPath..."
        Move-Item -Path $deploymentBuildPath -Destination $storjNetworkPath -Force
        Write-Host "Build deployed successfully"
        
        # Verify deployment
        if (Test-Path $storjNetworkPath) {
          $deployedSize = (Get-ChildItem $storjNetworkPath -Recurse | Measure-Object -Property Length -Sum).Sum
          Write-Host "Deployment verified ($([math]::Round($deployedSize/1MB, 2)) MB)"
        } else {
          Write-Error "Deployment verification failed"
          exit 1
        }
        
    - name: ✅ Summary
      run: |
        Write-Host ""
        Write-Host "═══════════════════════════════════════════════════════════════" -ForegroundColor Green
        Write-Host "✅ Admin Back-Office UI successfully built and deployed!" -ForegroundColor Green
        Write-Host "📍 Deployment Path: $env:DEPLOY_PATH" -ForegroundColor Cyan
        Write-Host "═══════════════════════════════════════════════════════════════" -ForegroundColor Green
        Write-Host ""

