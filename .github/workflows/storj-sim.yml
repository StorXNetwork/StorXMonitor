
name: Build Storj Sim

on:
  workflow_dispatch:

env:
  GO_VERSION: '1.21'
  BIN_PATH: 'D:\bin'
  TEMP_PATH: 'D:\deployment'

jobs:
  build-storj-sim:
    runs-on: [self-hosted, windows]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: false
          
    - name: Pre-download dependencies
      run: |
        Write-Host "Pre-downloading dependencies..."
        go mod download
        if (Test-Path "cmd/storj-sim") {
          Write-Host "Pre-building storj-sim dependencies..."
          go build -o nul ./cmd/storj-sim 2>&1 | Write-Host
        }
        
    - name: Quick service stop
      run: |
        Set-Location $env:BIN_PATH
        $status = (Get-Service -Name StorjSatellite -ErrorAction SilentlyContinue).Status
        if ($status -eq "Running" -or $status -eq "Paused" -or $status -eq "StartPending") {
          & ".\nssm.exe" stop StorjSatellite 2>&1 | Out-Null
          Start-Sleep -Seconds 2  # Reduced wait time
        }
        
    - name: Fast build storj-sim.exe
      run: |
        $buildStart = Get-Date
        Write-Host "Building storj-sim.exe with optimizations..."
        
        # Use Go build cache and skip tests for faster build
        $env:GOFLAGS = "-buildvcs=false"
        
        $buildCmd = "go build -ldflags `"-s -w`" -o `"$env:TEMP_PATH\storj-sim.exe`" ./cmd/storj-sim"
        Write-Host "Build command: $buildCmd"
        
        Invoke-Expression $buildCmd
        
        $buildTime = (Get-Date) - $buildStart
        Write-Host "Build completed in $($buildTime.TotalSeconds) seconds"
        
        if (Test-Path "$env:TEMP_PATH\storj-sim.exe") {
          $size = (Get-Item "$env:TEMP_PATH\storj-sim.exe").Length
          Write-Host "storj-sim.exe built successfully ($([math]::Round($size/1MB, 2)) MB)"
        } else {
          Write-Error "Build failed - storj-sim.exe not found"
          exit 1
        }
        
    - name: Quick file replacement
      run: |
        # Minimal file operations
        if (Test-Path "$env:BIN_PATH\storj-sim.exe") {
          Remove-Item "$env:BIN_PATH\storj-sim.exe" -Force -ErrorAction SilentlyContinue
        }
        Move-Item "$env:TEMP_PATH\storj-sim.exe" "$env:BIN_PATH\storj-sim.exe" -Force
        Write-Host "storj-sim.exe replaced"
        
    - name: Quick service start
      run: |
        Set-Location $env:BIN_PATH
        & cmd /c ".\nssm.exe" start StorjSatellite 2>&1 | Out-Null
        Start-Sleep -Seconds 2  # Reduced wait time
        
        $status = (Get-Service -Name StorjSatellite -ErrorAction SilentlyContinue).Status
        Write-Host "StorjSatellite status: $status"
        Write-Host "Service start initiated"