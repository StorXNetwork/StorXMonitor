name: Build Storj Sim

on:
    push:
      branches: [ main ]
    workflow_dispatch:

jobs:
  build-storj-sim:
    runs-on: [self-hosted, windows]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: false
        
    - name: Clean Go cache (if setup fails)
      if: failure()
      run: |
        Remove-Item -Path "D:\deployment\StorXRunner\_work\_tool\go" -Recurse -Force -ErrorAction SilentlyContinue
        
    - name: Manual Go setup (fallback)
      if: failure()
      run: |
        $goUrl = "https://go.dev/dl/go1.21.13.windows-amd64.zip"
        $goZip = "go1.21.13.windows-amd64.zip"
        $goDir = "C:\go"
        
        Write-Host "Downloading Go manually..."
        Invoke-WebRequest -Uri $goUrl -OutFile $goZip
        
        Write-Host "Extracting Go..."
        Expand-Archive -Path $goZip -DestinationPath "C:\" -Force
        
        Write-Host "Setting Go environment..."
        $env:PATH = "C:\go\bin;" + $env:PATH
        $env:GOROOT = "C:\go"
        
        Write-Host "Go version:"
        go version
        
        Remove-Item $goZip -Force
        
    - name: Stop StorjSatellite service before build
      run: |
        $binPath = "D:\bin"
        Set-Location $binPath
        Write-Host "Current directory: $(Get-Location)"
        
        Write-Host "Stopping StorjSatellite service..."
        $stopResult = & ".\nssm.exe" stop StorjSatellite 2>&1
        Write-Host "  Result: $stopResult"
        
        # Wait for service to stop
        Start-Sleep -Seconds 3
        $serviceStatus = (Get-Service -Name StorjSatellite -ErrorAction SilentlyContinue).Status
        Write-Host "  Status: $serviceStatus"
        
    - name: Build storj-sim.exe
      run: |
        $buildPath = "D:\bin"
        Write-Host "Building storj-sim.exe in $buildPath"
        
        Write-Host "Current directory: $(Get-Location)"
        Write-Host "Checking if cmd/storj-sim exists:"
        if (Test-Path "cmd/storj-sim") {
          Write-Host "cmd/storj-sim directory exists"
          
          # Check if storj-sim.exe already exists and backup if needed
          if (Test-Path "$buildPath\storj-sim.exe") {
            Write-Host "Existing storj-sim.exe found in $buildPath"
            $existingFile = Get-Item "$buildPath\storj-sim.exe"
            Write-Host "  Current size: $($existingFile.Length) bytes"
            Write-Host "  Current modified: $($existingFile.LastWriteTime)"
            
            # Clean up old backups first
            Write-Host "Cleaning up old backup files..."
            $oldBackups = Get-ChildItem "$buildPath\storj-sim_backup_*.exe" -ErrorAction SilentlyContinue
            if ($oldBackups) {
              foreach ($backup in $oldBackups) {
                Write-Host "  Deleting old backup: $($backup.Name)"
                Remove-Item $backup.FullName -Force
              }
              Write-Host "  Cleaned up $($oldBackups.Count) old backup(s)"
            } else {
              Write-Host "  No old backups found to clean up"
            }
            
            # Create new backup
            $backupPath = "$buildPath\storj-sim_backup.exe"
            Copy-Item "$buildPath\storj-sim.exe" $backupPath
            Write-Host "  Backed up current storj-sim.exe to: storj-sim_backup.exe"
          } else {
            Write-Host "No existing storj-sim.exe found in $buildPath"
          }
          
          Write-Host "Building storj-sim.exe..."
          $buildCmd = "go build -o `"$buildPath\storj-sim.exe`" ./cmd/storj-sim"
          Write-Host "Build command: $buildCmd"
          
          Invoke-Expression $buildCmd
          
          Write-Host "Build completed. Checking if storj-sim.exe was created in $buildPath"
          if (Test-Path "$buildPath\storj-sim.exe") {
            $fileInfo = Get-Item "$buildPath\storj-sim.exe"
            Write-Host "storj-sim.exe created successfully in $buildPath"
            Write-Host "  Size: $($fileInfo.Length) bytes"
            Write-Host "  Location: $($fileInfo.FullName)"
            Write-Host "  Modified: $($fileInfo.LastWriteTime)"
          } else {
            Write-Error "storj-sim.exe was not created in $buildPath"
            Write-Host "Listing $buildPath contents:"
            if (Test-Path $buildPath) {
              Get-ChildItem $buildPath | Select-Object Name, Length
            } else {
              Write-Host "$buildPath directory does not exist"
            }
          }
        } else {
          Write-Error "cmd/storj-sim directory not found"
          Write-Host "Available directories:"
          Get-ChildItem -Directory | Select-Object Name
        }
        
    - name: Start StorjSatellite service after build
      run: |
        $binPath = "D:\bin"
        Set-Location $binPath
        Write-Host "Current directory: $(Get-Location)"
        
        Write-Host "Starting StorjSatellite service..."
        $startResult = & ".\nssm.exe" start StorjSatellite 2>&1
        Write-Host "  Result: $startResult"
        
        # Wait for service to start
        Start-Sleep -Seconds 3
        $serviceStatus = (Get-Service -Name StorjSatellite -ErrorAction SilentlyContinue).Status
        Write-Host "  Status: $serviceStatus"
        
        if ($serviceStatus -eq "Running") {
          Write-Host "  Successfully started StorjSatellite"
        } else {
          Write-Warning "  StorjSatellite is in $serviceStatus state"
        }