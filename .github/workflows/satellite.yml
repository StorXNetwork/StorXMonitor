name: Build and Deploy Satellite

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: [self-hosted, windows]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: false
        
    - name: Clean Go cache (if setup fails)
      if: failure()
      run: |
        Remove-Item -Path "D:\deployment\StorXRunner\_work\_tool\go" -Recurse -Force -ErrorAction SilentlyContinue
        
    - name: Manual Go setup (fallback)
      if: failure()
      run: |
        $goUrl = "https://go.dev/dl/go1.21.13.windows-amd64.zip"
        $goZip = "go1.21.13.windows-amd64.zip"
        $goDir = "C:\go"
        
        Write-Host "Downloading Go manually..."
        Invoke-WebRequest -Uri $goUrl -OutFile $goZip
        
        Write-Host "Extracting Go..."
        Expand-Archive -Path $goZip -DestinationPath "C:\" -Force
        
        Write-Host "Setting Go environment..."
        $env:PATH = "C:\go\bin;" + $env:PATH
        $env:GOROOT = "C:\go"
        
        Write-Host "Go version:"
        go version
        
        Remove-Item $goZip -Force
        
    - name: Build satellite.exe
      run: |
        cd cmd/satellite
        go build -o satellite.exe .
        
    - name: Stop existing services
      run: |
        $services = @("StorjNetwork", "StorjSatellite", "StorjSatelliteBackup")
        foreach ($service in $services) {
          if (Get-Service -Name $service -ErrorAction SilentlyContinue) {
            Write-Host "Stopping $service service..."
            Stop-Service -Name $service -Force
            
            # Wait for service to fully stop
            $timeout = 30
            $elapsed = 0
            do {
              Start-Sleep -Seconds 2
              $elapsed += 2
              $serviceStatus = (Get-Service -Name $service).Status
              Write-Host "  $service status: $serviceStatus (waited $elapsed seconds)"
            } while ($serviceStatus -eq "Stopping" -and $elapsed -lt $timeout)
            
            if ($serviceStatus -eq "Stopped") {
              Write-Host "Successfully stopped $service service"
            } else {
              Write-Warning "$service service did not stop within $timeout seconds"
            }
          } else {
            Write-Host "No existing $service service found"
          }
        }
        
        # Additional wait to ensure file handles are released
        Write-Host "Waiting 5 seconds for file handles to be released..."
        Start-Sleep -Seconds 5
        
        # Kill any remaining processes that might be using satellite.exe
        Write-Host "Checking for processes using satellite.exe..."
        $processes = Get-Process | Where-Object { $_.Path -like "*satellite.exe" }
        if ($processes) {
          foreach ($process in $processes) {
            Write-Host "Killing process: $($process.Name) (PID: $($process.Id))"
            Stop-Process -Id $process.Id -Force -ErrorAction SilentlyContinue
          }
          Start-Sleep -Seconds 3
        } else {
          Write-Host "No satellite.exe processes found"
        }
        
    - name: Backup existing satellite.exe
      run: |
        $binPath = "D:\bin"
        $backupPath = "D:\bin\backups"
        $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
        
        if (Test-Path "$binPath\satellite.exe") {
          if (-not (Test-Path $backupPath)) {
            New-Item -ItemType Directory -Path $backupPath -Force
          }
          Copy-Item "$binPath\satellite.exe" "$backupPath\satellite_backup_$timestamp.exe"
          Write-Host "Backed up existing satellite.exe to $backupPath\satellite_backup_$timestamp.exe"
        }
        
    - name: Replace satellite.exe
      run: |
        $binPath = "D:\bin"
        Copy-Item "cmd\satellite\satellite.exe" "$binPath\satellite.exe" -Force
        Write-Host "Replaced satellite.exe in $binPath"
        
    - name: Start services
      run: |
        $services = @("StorjNetwork", "StorjSatellite", "StorjSatelliteBackup")
        $failedServices = @()
        
        foreach ($service in $services) {
          if (Get-Service -Name $service -ErrorAction SilentlyContinue) {
            $serviceStatus = (Get-Service -Name $service).Status
            Write-Host "Service $service current status: $serviceStatus"
            
            try {
              if ($serviceStatus -eq "Paused") {
                Write-Host "Attempting to resume paused $service service..."
                Resume-Service -Name $service
                Write-Host "Successfully resumed paused $service service"
              } elseif ($serviceStatus -eq "Stopped") {
                Write-Host "Attempting to start stopped $service service..."
                Start-Service -Name $service
                Write-Host "Successfully started $service service"
              } elseif ($serviceStatus -eq "Running") {
                Write-Host "$service service is already running"
              } else {
                Write-Host "Service $service is in unexpected state: $serviceStatus"
                Write-Host "Attempting to start $service service..."
                try {
                  Start-Service -Name $service
                  Write-Host "Successfully started $service service"
                } catch {
                  if ($_.Exception.Message -like "*already running*") {
                    Write-Host "$service service is already running (instance exists)"
                  } else {
                    throw $_
                  }
                }
              }
              
              # Verify service started successfully
              Start-Sleep -Seconds 2
              $finalStatus = (Get-Service -Name $service).Status
              Write-Host "Service $service final status: $finalStatus"
              
            } catch {
              Write-Error "Failed to start/resume $service service: $($_.Exception.Message)"
              Write-Host "Service $service error details: $($_.Exception)"
              $failedServices += $service
            }
          } else {
            Write-Error "No $service service found - service must be configured"
            $failedServices += $service
          }
        }
        
        if ($failedServices.Count -gt 0) {
          Write-Error "Failed to start services: $($failedServices -join ', ')"
          Write-Error "Deployment failed - all services must be running"
          exit 1
        }
        
    - name: Verify deployment
      run: |
        $binPath = "D:\bin"
        if (Test-Path "$binPath\satellite.exe") {
          $fileInfo = Get-Item "$binPath\satellite.exe"
          Write-Host "âœ“ satellite.exe deployed successfully"
          Write-Host "  Size: $($fileInfo.Length) bytes"
          Write-Host "  Modified: $($fileInfo.LastWriteTime)"
        } else {
          Write-Error "satellite.exe not found in $binPath"
          exit 1
        }
