name: Build Satellite

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-satellite:
    runs-on: [self-hosted, windows]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: false
        
    - name: Clean Go cache (if setup fails)
      if: failure()
      run: |
        Remove-Item -Path "D:\deployment\StorXRunner\_work\_tool\go" -Recurse -Force -ErrorAction SilentlyContinue
        
    - name: Manual Go setup (fallback)
      if: failure()
      run: |
        $goUrl = "https://go.dev/dl/go1.21.13.windows-amd64.zip"
        $goZip = "go1.21.13.windows-amd64.zip"
        $goDir = "C:\go"
        
        Write-Host "Downloading Go manually..."
        Invoke-WebRequest -Uri $goUrl -OutFile $goZip
        
        Write-Host "Extracting Go..."
        Expand-Archive -Path $goZip -DestinationPath "C:\" -Force
        
        Write-Host "Setting Go environment..."
        $env:PATH = "C:\go\bin;" + $env:PATH
        $env:GOROOT = "C:\go"
        
        Write-Host "Go version:"
        go version
        
        Remove-Item $goZip -Force
        
    - name: Stop services before build
      run: |
        $binPath = "D:\bin"
        $services = @("StorxBackup", "StorxAuditor", "StorjSatellite")
        
        Set-Location $binPath
        Write-Host "Current directory: $(Get-Location)"
        
        foreach ($service in $services) {
          $serviceStatus = (Get-Service -Name $service -ErrorAction SilentlyContinue).Status
          Write-Host "$service current status: $serviceStatus"
          
          if ($serviceStatus -eq "Running" -or $serviceStatus -eq "Paused" -or $serviceStatus -eq "StartPending") {
            Write-Host "Stopping $service service..."
            $stopResult = & ".\nssm.exe" stop $service 2>&1
            Write-Host "  Result: $stopResult"
            
            # Wait for service to stop
            Start-Sleep -Seconds 3
            $newStatus = (Get-Service -Name $service -ErrorAction SilentlyContinue).Status
            Write-Host "  New status: $newStatus"
          } else {
            Write-Host "$service service is already stopped (status: $serviceStatus)"
          }
        }
        
    - name: Build satellite.exe
      run: |
        $buildPath = "D:\bin"
        Write-Host "Building satellite.exe in $buildPath"
        
        Write-Host "Current directory: $(Get-Location)"
        Write-Host "Checking if cmd/satellite exists:"
        if (Test-Path "cmd/satellite") {
          Write-Host "cmd/satellite directory exists"
          
          # Check if satellite.exe already exists and backup if needed
          if (Test-Path "$buildPath\satellite.exe") {
            Write-Host "Existing satellite.exe found in $buildPath"
            $existingFile = Get-Item "$buildPath\satellite.exe"
            Write-Host "  Current size: $($existingFile.Length) bytes"
            Write-Host "  Current modified: $($existingFile.LastWriteTime)"
            
            # Clean up old backups first
            Write-Host "Cleaning up old backup files..."
            $oldBackups = Get-ChildItem "$buildPath\satellite_backup_*.exe" -ErrorAction SilentlyContinue
            if ($oldBackups) {
              foreach ($backup in $oldBackups) {
                Write-Host "  Deleting old backup: $($backup.Name)"
                Remove-Item $backup.FullName -Force
              }
              Write-Host "  Cleaned up $($oldBackups.Count) old backup(s)"
            } else {
              Write-Host "  No old backups found to clean up"
            }
            
            # Create new backup
            $backupPath = "$buildPath\satellite_backup.exe"
            Copy-Item "$buildPath\satellite.exe" $backupPath
            Write-Host "  Backed up current satellite.exe to: satellite_backup.exe"
          } else {
            Write-Host "No existing satellite.exe found in $buildPath"
          }
          
          Write-Host "Building satellite.exe..."
          $buildCmd = "go build -ldflags `"-X 'storj.io/storj/satellite/console/secretconstants.Web3AuthPrivateKey=${{ secrets.WEB3_AUTH_PRIVATE_KEY }}'`" -o `"$buildPath\satellite.exe`" ./cmd/satellite"
          Write-Host "Build command: $buildCmd"
          
          Invoke-Expression $buildCmd
          
          Write-Host "Build completed. Checking if satellite.exe was created in $buildPath"
          if (Test-Path "$buildPath\satellite.exe") {
            $fileInfo = Get-Item "$buildPath\satellite.exe"
            Write-Host "satellite.exe created successfully in $buildPath"
            Write-Host "  Size: $($fileInfo.Length) bytes"
            Write-Host "  Location: $($fileInfo.FullName)"
            Write-Host "  Modified: $($fileInfo.LastWriteTime)"
          } else {
            Write-Error "satellite.exe was not created in $buildPath"
            Write-Host "Listing $buildPath contents:"
            if (Test-Path $buildPath) {
              Get-ChildItem $buildPath | Select-Object Name, Length
            } else {
              Write-Host "$buildPath directory does not exist"
            }
          }
        } else {
          Write-Error "cmd/satellite directory not found"
          Write-Host "Available directories:"
          Get-ChildItem -Directory | Select-Object Name
        }
        
    - name: Start services after build
      run: |
        $binPath = "D:\bin"
        $services = @("StorxBackup", "StorxAuditor", "StorjSatellite")
        
        Set-Location $binPath
        Write-Host "Current directory: $(Get-Location)"
        
        $ErrorActionPreference = "Continue"
        foreach ($service in $services) {
          $serviceStatus = (Get-Service -Name $service -ErrorAction SilentlyContinue).Status
          Write-Host "$service current status: $serviceStatus"
          
          if ($serviceStatus -eq "Stopped") {
            Write-Host "Starting $service service..."
            $startOutput = & cmd /c ".\nssm.exe start $service" 2>&1
            Write-Host "  Output: $startOutput"
            
            # Wait for service to start and check actual status
            Start-Sleep -Seconds 5
            $newStatus = (Get-Service -Name $service -ErrorAction SilentlyContinue).Status
            Write-Host "  New status: $newStatus"
            
            # Check if service is running or in a valid state
            if ($newStatus -eq "Running") {
              Write-Host "  Successfully started $service"
            } elseif ($newStatus -eq "StartPending") {
              Write-Host "  $service is starting (StartPending) - this is acceptable"
            } else {
              Write-Warning "  $service is in $newStatus state"
            }
          } elseif ($serviceStatus -eq "Running" -or $serviceStatus -eq "StartPending") {
            Write-Host "$service service is already running or starting (status: $serviceStatus)"
          } else {
            Write-Host "$service service is in $serviceStatus state - attempting to start..."
            $startOutput = & cmd /c ".\nssm.exe start $service" 2>&1
            Write-Host "  Output: $startOutput"
            
            Start-Sleep -Seconds 5
            $newStatus = (Get-Service -Name $service -ErrorAction SilentlyContinue).Status
            Write-Host "  New status: $newStatus"
            
            if ($newStatus -eq "Running" -or $newStatus -eq "StartPending") {
              Write-Host "  Service is starting or running"
            }
          }
        }
