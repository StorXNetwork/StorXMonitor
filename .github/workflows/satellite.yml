name: Build Satellite

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  GO_VERSION: '1.21'
  BIN_PATH: 'D:\bin'
  TEMP_PATH: 'D:\deployment'
  SERVICES: 'StorxBackup,StorxAuditor,StorjSatellite'

jobs:
  build-satellite:
    runs-on: [self-hosted, windows]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: false
          
    - name: Pre-download dependencies
      run: |
        Write-Host "Pre-downloading dependencies..."
        go mod download
        if (Test-Path "cmd/satellite") {
          Write-Host "Pre-building satellite dependencies..."
          go build -o nul ./cmd/satellite 2>&1 | Write-Host
        }
        
    - name: Parallel service stop
      run: |
        $services = $env:SERVICES -split ','
        $stopJobs = @()
        
        foreach ($service in $services) {
          $stopJobs += Start-Job -ScriptBlock {
            param($serviceName, $binPath)
            Set-Location $binPath
            $status = (Get-Service -Name $serviceName -ErrorAction SilentlyContinue).Status
            if ($status -eq "Running" -or $status -eq "Paused" -or $status -eq "StartPending") {
              & ".\nssm.exe" stop $serviceName 2>&1 | Out-Null
            }
          } -ArgumentList $service, $env:BIN_PATH
        }
        
        # Wait for all stop jobs to complete (max 10 seconds)
        $stopJobs | Wait-Job -Timeout 10 | Out-Null
        Write-Host "All services stopped or timeout reached"
        
    - name: Fast build satellite.exe
      run: |
        $buildStart = Get-Date
        Write-Host "Building satellite.exe with optimizations..."
        
        # Use Go build cache and skip tests for faster build
        $env:GOFLAGS = "-buildvcs=false"
        
        $buildCmd = "go build -ldflags `"-s -w -X 'storj.io/storj/satellite/console/secretconstants.Web3AuthPrivateKey=${{ secrets.WEB3_AUTH_PRIVATE_KEY }}'`" -o `"$env:TEMP_PATH\satellite.exe`" ./cmd/satellite"
        Write-Host "Build command: $buildCmd"
        
        Invoke-Expression $buildCmd
        
        $buildTime = (Get-Date) - $buildStart
        Write-Host "Build completed in $($buildTime.TotalSeconds) seconds"
        
        if (Test-Path "$env:TEMP_PATH\satellite.exe") {
          $size = (Get-Item "$env:TEMP_PATH\satellite.exe").Length
          Write-Host "satellite.exe built successfully ($([math]::Round($size/1MB, 2)) MB)"
        } else {
          Write-Error "Build failed - satellite.exe not found"
          exit 1
        }
        
    - name: Quick file replacement
      run: |
        # Minimal file operations
        if (Test-Path "$env:BIN_PATH\satellite.exe") {
          Remove-Item "$env:BIN_PATH\satellite.exe" -Force -ErrorAction SilentlyContinue
        }
        Move-Item "$env:TEMP_PATH\satellite.exe" "$env:BIN_PATH\satellite.exe" -Force
        Write-Host "satellite.exe replaced"
        
    - name: Parallel service start
      run: |
        $services = $env:SERVICES -split ','
        $startJobs = @()
        
        foreach ($service in $services) {
          $startJobs += Start-Job -ScriptBlock {
            param($serviceName, $binPath)
            Set-Location $binPath
            & cmd /c ".\nssm.exe" start $serviceName 2>&1 | Out-Null
          } -ArgumentList $service, $env:BIN_PATH
        }
        
        # Wait for all start jobs to complete (max 15 seconds)
        $startJobs | Wait-Job -Timeout 15 | Out-Null
        
        # Quick status check
        foreach ($service in $services) {
          $status = (Get-Service -Name $service -ErrorAction SilentlyContinue).Status
          Write-Host "$service status: $status"
        }
        Write-Host "All services started"
