//--- developer console ---//

// developer contains information about people who have developer console access access.
model developer (
    key id

    index (
        name developer_email_status_index
        fields normalized_email status
    )

    // id is an uuid for the developer.
    field id                 blob
    // email is the developer specified email.
    field email              text      ( updatable )
    // normalized_email is the email transformed by usual rules, e.g. case-insensitive.
    // See satellitedb.normalizeEmail for the specific details.
    field normalized_email   text      ( updatable )
    // full_name is the developer specified name.
    field full_name          text      ( updatable )
    // password_hash is the bcrypt hash.
    field password_hash      blob      ( updatable )

    // status indicates whether the developer is inactive=0, active=1, or deleted=2.
    field status                   int       ( updatable, autoinsert )
    // created_at indicates when the developer was created.
    field created_at               timestamp ( autoinsert )

    // company_name is developer-specified company name.
    field company_name       text      ( updatable, nullable )

    // failed_login_count keeps track on how many times login has failed.
    field failed_login_count int ( updatable, nullable )
    // login_lockout_expiration is used when the developer has failed to login too many times.
    field login_lockout_expiration timestamp ( updatable, nullable )

    // activation_code is a code sent to a developer's email on signup for account activation.
    field activation_code     text      ( updatable, nullable )
    // signup_id is a the request ID associated to a sign up session, used to also verify activation_code.
    field signup_id     text      ( updatable, nullable )
)

create developer ( )
update developer ( where developer.id = ? )
delete developer ( where developer.id = ? )

read all (
    select developer
)

read all (
    select developer
    where developer.normalized_email = ?
)
read one (
    select developer
    where developer.normalized_email = ?
    where developer.status != 0
)
read one (
    select developer
    where developer.id = ?
)

read count (
	select developer
	where developer.status = ?
)

read limitoffset (
	select developer.id developer.email developer.full_name
	where developer.status = ?
)

model developer_user_mapping (
    key id
    index ( fields developer_id user_id )

    field id blob
    field developer_id blob
    field user_id blob
)

create developer_user_mapping ( )
delete developer_user_mapping ( where developer_user_mapping.id = ? )
delete developer_user_mapping ( where developer_user_mapping.developer_id = ? )
delete developer_user_mapping ( where developer_user_mapping.user_id = ? )

read all (
    select developer_user_mapping
    where developer_user_mapping.developer_id = ?
)

read one (
    select developer_user_mapping
    where developer_user_mapping.developer_id = ?
    where developer_user_mapping.user_id = ?
)

read all (
    select developer_user_mapping
    where developer_user_mapping.user_id = ?
)

model webapp_session_developer (
    key id
    index ( fields developer_id )

    field id         blob
    field developer_id    blob
    field ip_address text
    field status     int       ( updatable, autoinsert )
    field expires_at timestamp ( updatable )
)

create webapp_session_developer ( )
update webapp_session_developer ( where webapp_session_developer.id = ? )
delete webapp_session_developer ( where webapp_session_developer.id = ? )
delete webapp_session_developer ( where webapp_session_developer.developer_id = ? )

read all (
    select webapp_session_developer
    where webapp_session_developer.developer_id = ?
)
read one (
    select webapp_session_developer
    where webapp_session_developer.id = ?
)

// registration_token_developer is used to limit developer registration to the satellite.
model registration_token_developer (
    key secret
    unique owner_id

    // secret is random identifier used during registration.
    field secret        blob
    // owner_id is the developer who claimed this token. This refers to developer.id column.
    field owner_id      blob       ( updatable, nullable )

    // project_limit is the default limit on how many projects the developer can create.
    field project_limit int

    field created_at    timestamp  ( autoinsert )
)

create registration_token_developer ( )
read one (
    select registration_token_developer
    where  registration_token_developer.secret = ?
)
read one (
    select registration_token_developer
    where  registration_token_developer.owner_id = ?
)
update registration_token_developer ( where registration_token_developer.secret = ? )

// reset_password_token_developer is a token that is used when resetting password.
model reset_password_token_developer (
    key    secret
    unique owner_id

    // secret is sent to the developers email, to verify their account.
    field secret blob
    // owner_id is the associated developer. This refers to developer.id column.
    field owner_id blob        ( updatable )

    field created_at timestamp ( autoinsert )
)

create reset_password_token_developer ( )
read one (
    select reset_password_token_developer
    where reset_password_token_developer.secret = ?
)
read one (
    select reset_password_token_developer
    where reset_password_token_developer.owner_id = ?
)
delete reset_password_token_developer ( where reset_password_token_developer.secret = ? )

// --- OAuth2 client for developer ---
model developer_oauth_client (
    key id
    index ( fields developer_id )

    field id blob
    field developer_id blob
    field client_id text
    field client_secret text
    field name text
    field redirect_uris text
    field status int ( updatable )
    field created_at timestamp ( autoinsert )
    field updated_at timestamp ( updatable )
)

create developer_oauth_client ( )
update developer_oauth_client ( where developer_oauth_client.id = ? )
delete developer_oauth_client ( where developer_oauth_client.id = ? )
delete developer_oauth_client ( where developer_oauth_client.developer_id = ? )

read all (
    select developer_oauth_client
    where developer_oauth_client.developer_id = ?
)
read one (
    select developer_oauth_client
    where developer_oauth_client.id = ?
)

model oauth2_request (
    key id
    index ( fields client_id )
    index ( fields user_id )
    field id blob
    field client_id text
    field user_id blob
    field redirect_uri text
    field scopes text
    field status int ( updatable )
    field created_at timestamp ( autoinsert )
    field expires_at timestamp
    field code text ( updatable )
    field approved_scopes text ( updatable )
    field rejected_scopes text ( updatable )
)

create oauth2_request ( )
update oauth2_request ( where oauth2_request.id = ? )
delete oauth2_request ( where oauth2_request.id = ? )

read one (
    select oauth2_request
    where oauth2_request.id = ?
)
read one (
    select oauth2_request
    where oauth2_request.code = ?
)
